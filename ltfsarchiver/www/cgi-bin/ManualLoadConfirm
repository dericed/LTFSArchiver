#!/bin/bash
#  PrestoPRIME  LTFSArchiver
#  Version: 1.3
#  Authors: L. Savio, L. Boch, R. Borgotallo
#
#  Copyritght (C) 2011-2012 RAI â€“ Radiotelevisione Italiana <cr_segreteria@rai.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
. $CFGFILE
. `dirname $0`/common.sh
command=`basename $0`
PARM=$QUERY_STRING
RECEIVEDTIME=`date +'%Y-%m-%dT%H:%M:%S'`
VALIDPARMS="TapeID|Device|Error|FromGUI|Output"
output=$( get_parameter Output )
normalize_output
get_supplied_parameters
tapeid=$( get_parameter TapeID )
deviceid=$( get_parameter Device )
errorwhy=$( get_parameter Error )
guicall=$( get_parameter FromGUI )
test_passed=true
if [ -z $output ]; then
	output=`echo $LTFSARCHIVER_OUTPUT | tr '[A-Z]' ' [a-z]'`
	PARM=$PARM'&Output='$output
fi
[ -z $guicall ] && guicall=false
if ! [ -z "$BADPARMS" ]; then
	exitcode="400"; message="${BADPARMS}"
	test_passed=false
fi
if $test_passed; then
	if [ -z $tapeid ]; then
		exitcode="400"; message="Empty TapeID supplied"
		test_passed=false
	fi
fi
if $test_passed; then
	if [ -z $deviceid ]; then
		exitcode="400"; message="Empty Device supplied"
		test_passed=false
	fi
fi
if $test_passed; then
	if [ -z $errorwhy ]; then
		forwardtask=true
	else
		case $errorwhy in
			"TapeNotFound")
				forwardtask=false
				errorcode="801"
				errordesc="Manual tape load was rejected: Tape not found"
			;;
			"DeviceError")
				forwardtask=false
				errorcode="802"
				errordesc="Manual tape load was rejected: Device error"
			;;
			*)
				test_passed=false
				exitcode="400"; message="Invalid Error value: only TapeNotFound and DeviceError are accepted"
			;;
		
		esac
	fi
fi
#	All test OK? let's try if somothing's waiting
if $test_passed; then
wt=( `$CMD_DB "select uuid, operation from requests where substatus=20 and manager='M' and ltotape='"$tapeid"' and device='"$deviceid"';" | tr -d ' ' | tr '\n' ' ' | tr '|' ' '` )
	# it shouldn't happen, but...
	if [ -z ${wt} ]; then
		exitcode="404"; message="No pending mount request found with this criteria"
	else
		GLOBALRC=0
		for ((ti=0;ti<${#wt[@]};ti+=2)); do
			#	Forward or fallout?
			if $forwardtask; then
				#	forward
				$CMD_DB "update requests set substatus=40, status='starting' where uuid='"${wt[$ti]}"';" >/dev/null 2>&1
				let GLOBALRC+=$?
			else	#	fallout
				$CMD_DB "update requests set status='fallout',substatus=99, errordescription='${errordesc}', errorcode=$errorcode where uuid='${wt[$ti]}';" >/dev/null 2>&1
				let GLOBALRC+=$?
				#	If they were archive, get booked space from requests and decrease value into lto table
				if [ ${wt[$ti+1]} == "W" ]; then
					UNBOOK=`$CMD_DB "select sourcesize from requests where uuid='"${wt[$ti]}"';" | tr -d ' '`
					$CMD_DB "update lto_info set booked=booked-${UNBOOK} where label='"$tapeid"';" >/dev/null 2>&1
					let GLOBALRC+=$?
				fi
			fi
		done
		#	IF FALLOUT, FREE RESOURCES
		if ! $forwardtask; then
			#	free tape
			$CMD_DB "update lto_info set inuse=NULL where label='${tapeid}'" > /dev/null 2>&1
			let GLOBALRC+=$?
			#	free device
			$CMD_DB" delete from lock_table where device='"${deviceid}"';" >/dev/null 2>&1
			let GLOBALRC+=$?
		fi
		if [ $GLOBALRC == 0 ]; then
			exitcode="200"
		else
			exitcode="500"; message="Some error occured while updating db"
		fi
	fi
fi
crea_xml_answer
send_output

