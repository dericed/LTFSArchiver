#!/bin/bash
#  PrestoPRIME  LTFSArchiver
#  Version: 1.3
#  Authors: L. Savio, L. Boch, R. Borgotallo
#
#  Copyritght (C) 2011-2012 RAI â€“ Radiotelevisione Italiana <cr_segreteria@rai.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

function Verify_CheckFile()
{
CHKSMFILE=$( get_parameter ChecksumFile )
#	Check if file exists
if ! [ -f $CHKSMFILE ]; then
        exitcode="400"; message="ChecksumFile supplied: $CHKSMFILE not found"
        FILEPASS="N"
else
	#	Check if file has #CHECKSUMTYPE in the first lin
        case `head -1 $CHKSMFILE | sed -e 's/^#//'` in
                "MD5"|"SHA1")
			#	Check if all aother lines have FLOCATS (filepaths non allowed)
			#	count items lines:
			FILECOUNT=`grep -cv ^# $CHKSMFILE`
			FLOCCOUNT=`grep -v ^# $CHKSMFILE | grep -c "${filesrc}"`
			if [ $FILECOUNT == $FLOCCOUNT ]; then
	                        FILEPASS="Y"
			else
				exitcode="400"; message="Invalid checksum content"
				FILEPASS="N"
			fi
                ;;
                *)
                        exitcode="400"; message="Invalid checksum type supplied: "`head -1 $CHKSMFILE | sed -e 's/^#//'`
                        FILEPASS="N"
                ;;
        esac
fi
}

function insert_checksum()
{
callingtime=`date '+%Y-%m-%d %H:%M:%S'`
$CMD_DB "INSERT INTO requests ( uuid,status,substatus,manager,operation,sourcefile,callingtime, checksum, checksumfile,ltotape) \
	VALUES ( '$taskid','waiting',0,'$LTFSARCHIVER_MODE','V','$filesrc','$callingtime','$ask4checksum','$checksumfile','${FLO_PARTS[1]}')" > /dev/null 2>&1
RC=$?
}


# Script starts here
. $CFGFILE
. `dirname $0`/common.sh
command=`basename $0`
PARM=$QUERY_STRING
RECEIVEDTIME=`date +'%Y-%m-%dT%H:%M:%S'`
VALIDPARMS="Checksum|ChecksumFile|FileName|FromGUI|Output"


output=$( get_parameter Output )
normalize_output
get_supplied_parameters
poolname=$( get_parameter PoolName )		#	PoolName
ask4checksum=$( get_parameter Checksum )	#	Tipo di checksum richiesto
filesrc=$( get_parameter FileName )		#	FLocat da lavorare
checksumfile=$( get_parameter ChecksumFile )	#	File con checksum precalcolati
guicall=$( get_parameter FromGUI )		#	true (da parametro nascosto) se arriva da pagina web
insert_substatus=0
test_passed=true
if [ -z $output ]; then
	output=`echo $LTFSARCHIVER_OUTPUT | tr '[A-Z]' ' [a-z]'`
	PARM=$PARM'&Output='$output
fi
#	Eventuali default
if [ -z $ask4checksum ]; then
	ask4checksum="auto"
	PARM=$PARM'&Checksum='$ask4checksum
fi
[ -z $guicall ] && guicall=false
if ! [ -z "$BADPARMS" ]; then
        exitcode="400"; message="${BADPARMS}"
	test_passed=false
fi
#==================================================================================
[ -z $guicall ] && guicall=false
if $test_passed; then
	#	C'e' un valore non valido in Checksum - stampo ed esco
	case $ask4checksum in
		"MD5"|"SHA1"|"FILE"|"auto")
		;;
		*)
			exitcode='400';	message='Invalid Checksum value supplied'
			test_passed=false
		;;
	esac
fi
if $test_passed; then
	#	E' stato passato ChecksumFile ma Checksum diverso da FILE - stampo ed esco
	if ( ! [ -z "$checksumfile" ] && [ "$ask4checksum" != "FILE" ] ); then
		exitcode='400';	message='ChecksumFile supplied but Checksum is not set to FILE'
		test_passed=false
	fi
fi
if $test_passed ; then
	#	E' stato passato ChecksumFile ma Checksum diverso da FILE - stampo ed esco
	if ( [ -z "$checksumfile" ] && [ "$ask4checksum" == "FILE" ] ); then
		exitcode='400';	message='ChecksumFile not supplied but Checksum is set to FILE'
		test_passed=false
	fi
fi
#       Check FileName
if $test_passed ; then
	if  [ -z "$filesrc" ]; then
		exitcode="400";message="Empty FileName supplied "; test_passed=false
	else
		#       sintassi flocat
		FLO_PARTS=( `echo $filesrc | tr ':' ' '` )
		if [ ${#FLO_PARTS[@]} -ne 3 ]; then
			exitcode="400"; message="Invalid flocat syntax"; test_passed=false
		else
			if ! [ ${FLO_PARTS[0]} == "lto-ltfs" ]; then
				exitcode="400"; message="Invalid flocat type"; test_passed=false
			else
				if $( validate_uuid ${FLO_PARTS[2]} ); then
					cercatape ${FLO_PARTS[1]}
					if [ $trovato == 0 ]; then
						exitcode="400"; message="Tape referred by flocat (${FLO_PARTS[1]}) not found"
						test_passed=false
					fi
				else
					exitcode="400"; message="Invalid flocat"; test_passed=false
				fi
			fi
		fi
	fi
fi
#	Verify that Checksum file has a valid form
if $test_passed; then
	if [ "$ask4checksum" == "FILE" ]; then
		Verify_CheckFile
		if [ $FILEPASS == "N" ]; then
			test_passed=false
		fi
	else
		FILEPASS="Y"
	fi
fi
if $test_passed; then
	taskid=`uuidgen`
	#	Insert DB
	insert_checksum
	if [ $RC == 0 ]; then
		#	restituisco dati
		exitcode="200"
		crea_xml_output
	else
		exitcode='500';	message='Error occurred'
		unset taskid
	fi
fi
crea_xml_answer
send_output
