#!/bin/bash
#  PrestoPRIME  LTFSArchiver
#  Version: 1.3
#  Authors: L. Savio, L. Boch, R. Borgotallo
#
#  Copyritght (C) 2011-2012 RAI â€“ Radiotelevisione Italiana <cr_segreteria@rai.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###############################
CFG_FILE=`dirname $0`/../conf/ltfsarchiver.conf
. $CFG_FILE
. $LTFSARCHIVER_HOME/sbin/common.sh
. $LTFSARCHIVER_HOME/sbin/archive_functions.sh
. $LTFSARCHIVER_HOME/sbin/checksum_functions.sh
###############################
#	Incomingg parms:
#	$1 = logfile
#	$2-$n = UUDIs
PARMSN=$#
PARMSS=( $@ )
MAIN_LOG_FILE=${PARMSS[0]}
#	An array with all UUIOD is created
for ((UUID_I=1; UUID_I<$PARMSN; UUID_I++)); do
	LISTA_UUID=( "${LISTA_UUID[@]}" ${PARMSS[$UUID_I]} )
done
#	Using first uuid to determine tape label and device t be used
COMMON_PARMS=( `$CMD_DB" select ltotape, device from requests where uuid='${LISTA_UUID[0]}';" | tr -d ' ' | tr '|' ' ' ` )
#	LTFS mount moint
TARGETFS=/mnt/ltfs`basename ${COMMON_PARMS[1]}`
#	Detect LTO type to correctly set high watermark
LTO_TYPE=( `$CMD_DB"select ltotype from lto_info where label='${COMMON_PARMS[0]}';" | tr -d ' ' | tr '|' ' ' `)
for ((LTOTIDX=0; LTOTIDX<${#LTO_ALLOWED_TYPES[@]}; LTOTIDX++)); do
	if [ ${LTO_ALLOWED_TYPES[$LTOTIDX]} == $LTO_TYPE ]; then
		#	WATRMAK
		FREE_WATERMARK=${LTO_WATERMARK[$LTOTIDX]}
		#	Brutal exit from loop
		LTOTIDX=${#LTO_ALLOWED_TYPES[@]}
	fi
done
#	MAIN LOOP
#	CONTINUE is initially set tu TRUE.
#		It will be changend to FALSE in case of fallout
CONTINUE=true
for ((WORKING_IDX=0; WORKING_IDX<${#LISTA_UUID[@]}; WORKING_IDX++)); do
	#	UUID of the task
	WORKING_UUID=${LISTA_UUID[$WORKING_IDX]}
	#	Getting parametrs to be used during archive
	UUID_DATA=( `$CMD_DB"select datatype, sourcesize, checksum, checksumfile from requests where uuid='$WORKING_UUID'" | tr -d ' ' | tr '|' ' '` )
	#	If execution was not blocked by a previous task go on
	if $CONTINUE; then
		REAL_TARGET="$TARGETFS/$WORKING_UUID"		#	FINAL name of archiveing directory on tape
		TEMP_TARGET="$TARGETFS/temp.$WORKING_UUID"	#	TEMP name of archiveing directory on tape
		#	Absolute path of the item to be archived
		UUID_DATA_SOURCE=`$CMD_DB"select sourcefile from requests where uuid='$WORKING_UUID'" | sed -e 's/^[ \t]*//'`
		main_logger 4 "UUID_DATA: $UUID_DATA_SOURCE ${UUID_DATA[@]}"
		#	Store Flocat into the request table
		FLOCAT="lto-ltfs:"${COMMON_PARMS[0]}":"$WORKING_UUID/`basename "$UUID_DATA_SOURCE"`
		$CMD_DB" update requests set destfile='$FLOCAT' where uuid='$WORKING_UUID';" >/dev/null 2>&1
		#	Forward task to running status
		update_uuid_status $WORKING_UUID 50
		#	lets's check if the item to be archived really exists
		#		if true can start,
		#		if false... sorry, fallout
		if ( [ -d "$UUID_DATA_SOURCE" ] || [ -f "$UUID_DATA_SOURCE" ] ); then
			START_COPY=true
		else
			#	fallout code differs if item was a file o a dir
			( [ ${UUID_DATA[0]} == "F" ] || [ ${UUID_DATA[0]} == "f" ] ) &&	fallout_uuid $WORKING_UUID 104
			( [ ${UUID_DATA[0]} == "D" ] || [ ${UUID_DATA[0]} == "d" ] ) &&	fallout_uuid $WORKING_UUID 105
			create_fallout_report $WORKING_UUID "W"
			START_COPY=false
		fi
		#	
		#	Starting data copy
		#	Let's suppose that everything will end correctly
		COPY_RC=0
		if $START_COPY; then
			#	Better recheck freespace on tape
			ACTUAL_FREE=`$CMD_DB"select free from lto_info where label='${COMMON_PARMS[0]}'" | tr -d ' '`
			ACTUAL_NEEDS=`du -ksm "$UUID_DATA_SOURCE" | awk '{ print $1 }'`
			#	if it's less than needed...
			if [ $ACTUAL_FREE -lt $ACTUAL_NEEDS ]; then
				#	REQUEUE task
				requeue_uuid
				main_logger 0 "uuid $WORKING_UUID requeued due to real free space and needs recalculation"
				main_logger 0 " - booked space:  ${UUID_DATA[1]} MB"; main_logger 0 " - actual space: $ACTUAL_NEEDS MB"; main_logger 0 " - actual free:  $ACTUAL_FREE MB"
				
			else
				#	creating dest dir on tape (using temporary name)
				[ -d $TEMP_TARGET ] || mkdir $TEMP_TARGET
				if [ $? == 0 ]; then
					#	Setting final report file name
					XmlOutput=$LTFSARCHIVER_HOME/reportfiles/$WORKING_UUID.xml
					#	setup of parameters involved into checksum management
					checksum_config
					#	ARCHIVE CORE function
					exec_archive
					#	Evaluation of final Retrun code from "exec_archive"
					main_logger 4 "COPY_RC returned: $COPY_RC"
					#	If RC=0 the task has to be considered succesfully completede
					#	otherwise it will be sent to fallout status
					#	NOTE: COPY_RC doesn't reflect checksum creation/match results. It only indicates
					#	the COPY result.  Checksum controls will be analyzed later
					if [ $COPY_RC == 0 ]; then
						#	set final name of destination directory 
						mv $TEMP_TARGET $REAL_TARGET
						#	CHECKSUM result evaluation
						#	if true, than forwad task to completed
						#	otherwise send to fallout
						if $CHECKSUM_PASSED; then
							main_logger 0 "$WORKING_UUID archiving complete"
							update_uuid_status $WORKING_UUID 60
							create_success_report $WORKING_UUID "W"
						else
							main_logger 0 "Some file did not pass checksum verification"
							main_logger 0 "$WORKING_UUID is now in fallout"
							fallout_uuid $WORKING_UUID 111
							create_fallout_report $WORKING_UUID "W"
						fi
						#	Copy flocat list on tape
						cp $XmlOutput $REAL_TARGET
					else
						main_logger 0 "$WORKING_UUID is now in fallout"
						fallout_uuid $WORKING_UUID 107
						create_fallout_report $WORKING_UUID "W"
						#	Set continue to false... there could be some problem on tape
						#	remaining tasks will be requeued
						CONTINUE=false
					fi
				else 
					#	fallout due to missing (vanished after submission?) source
					fallout_uuid $WORKING_UUID 106
					create_fallout_report $WORKING_UUID "W"
				fi
			fi
		fi
		#	recheck of free space on tape and de-booking of the space booked for this uuid
		NOW_FREE=`df -m $TARGETFS | grep $TARGETFS | awk '{print $4}'`
		let NOW_FREE+=-$FREE_WATERMARK
		#	Dirty trick... :-(
		[ $NOW_FREE -lt 0 ] && NOW_FREE=0
		#	Update free an booked
		$CMD_DB" update lto_info set free=$NOW_FREE,booked=booked-${UUID_DATA[1]} where label='${COMMON_PARMS[0]}'" >/dev/null 2>&1
		bkpltoinfo
	else
		#	CONTINUE=false; reque of remeining tasks
		main_logger 0 "uuid $WORKING_UUID requeued due to a previous error"
		requeue_uuid
	fi
done
#	If CONTINUE was set to false, set free space to zero, so the tape will not be used by other archive tasks
if ! $CONTINUE ; then
	$CMD_DB" update lto_info set free=0 where label='${COMMON_PARMS[0]}'" >/dev/null 2>&1
	bkpltoinfo
fi
#	umount of file sistem
#	tape will be unloaded/ejected by tape_archive that called me
for ((attempt=1; attempt<5 ; attempt++)); do
	umount $TARGETFS
	URC=$?
	main_logger 5 "Umount command returned: $URC"
	if [ $URC == 0 ]; then
		attempt=6
	else
		main_logger 0 "Umount attempt $attempt failed: RC=$URC"
		sleep `echo "$attempt * 5" | bc`
	fi
done
#	waiting for LTFS index flushing
main_logger 1 "Waiting while LTFS updates index... $LTFSARCHIVER_LTFSTIMEOUT sec."
sleep $LTFSARCHIVER_LTFSTIMEOUT
