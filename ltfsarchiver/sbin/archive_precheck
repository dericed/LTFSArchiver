#!/bin/bash

#  PrestoPRIME  LTFSArchiver
#  Version: 1.0 Beta
#  Authors: L. Savio, L. Boch, R. Borgotallo
#
#  Copyritght (C) 2011-2012 RAI â€“ Radiotelevisione Italiana <cr_segreteria@rai.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#       1.0.0 
#################################################
##########	MAIN
#################################################

#	ricevo:
#		UUID
#	mi servono:
#		file/dir
#		oggetto sorgente
#		lista dei checksum
#
CFG_FILE=`dirname $0`/../conf/ltfsarchiver.conf
. $CFG_FILE
. $LTFSARCHIVER_HOME/sbin/common.sh
WORKING_UUID=$1
MAIN_LOG_FILE=$LTFSARCHIVER_LOGDIR/`basename $0`.$WORKING_UUID.log
UUID_FILETYPE=`$CMD_DB "select datatype from requests where uuid='$WORKING_UUID';" | tr -d ' '`
UUID_CHECKSUMFILE=`$CMD_DB"select checksumfile from requests where uuid='$WORKING_UUID'" | sed -e 's/^[ \t]*//'`
UUID_DATA_SOURCE=`$CMD_DB"select sourcefile from requests where uuid='$WORKING_UUID'" | sed -e 's/^[ \t]*//'`
TxtOutput=$LTFSARCHIVER_HOME/reportfiles/$WORKING_UUID.txt
JsonOutput=$LTFSARCHIVER_HOME/reportfiles/$WORKING_UUID.json
XmlOutput=$LTFSARCHIVER_HOME/reportfiles/$WORKING_UUID.xml
GOODJOB="Y"
case  $UUID_FILETYPE in
	"D"|"d")
		grep -v '^#' "$UUID_CHECKSUMFILE" | sed -re '/\*lto/s;\*lto.*:.*:.{36};\*'`dirname "$UUID_DATA_SOURCE"`';' > /tmp/$WORKING_UUID.checksumsupplied.txt
		FOUNDFILENUMBER=`find $UUID_DATA_SOURCE -type f | wc -l`
		fileodir="WriteFolder"
	;;
	"F"|"f")
		grep -v '^#' "$UUID_CHECKSUMFILE" | sed -e 's;\*.*;\*'$UUID_DATA_SOURCE';' > /tmp/$WORKING_UUID.checksumsupplied.txt
		FOUNDFILENUMBER=1
		fileodir="WriteFile"
	;;
esac
SUPPLIEDFILENUMBER=`wc -l /tmp/$WORKING_UUID.checksumsupplied.txt | cut -d ' ' -f 1`
MISSINGFILE=0
#	Se gia' ho due numeri diversi esco
if [ $SUPPLIEDFILENUMBER -ne $FOUNDFILENUMBER ]; then
	#	Scrivo i report
	main_logger 0 "Precheck control failed ($SUPPLIEDFILENUMBER supplied, $FOUNDFILENUMBER found)"
	fallout_uuid $WORKING_UUID 109
	GOODJOB="N"
	#	mando in fallout
else
	#per ognuno dei checksum passati DEVE esister il relativo 
	for ((LINENUM=1;$LINENUM<=$SUPPLIEDFILENUMBER;LINENUM++)); do
		temp=( `head -$LINENUM /tmp/$WORKING_UUID.checksumsupplied.txt | tail -1 | sed -e 's/^.*\*//'` )
		#       Nome file e checksum passati
		suppliedfile="${temp[@]}"
		main_logger 2 "File to check: $suppliedfile"
		if ! [ -f "$suppliedfile" ]; then
			main_logger 0 "$suppliedfile"' is missing'
			let MISSINGFILE+=1
		fi
	done
	main_logger 0 "---------------> MISSINGFILE="$MISSINGFILE
	if [ $MISSINGFILE -gt 0 ]; then
		main_logger 0 "Precheck control failed ($MISSINGFILE missing files)"
		fallout_uuid $WORKING_UUID 110
		GOODJOB="N"
	fi
fi
if [ $GOODJOB == "N" ]; then
	badrequest_message=`$CMD_DB"select errordescription from requests where uuid='"$WORKING_UUID"';"`
	echo -e '{"jobid":"'$WORKING_UUID'",' > $JsonOutput
	echo -e '"service":"WriteToLTO",'"\n"'"command":"'$fileodir'",'"\n"'"exitcode":"400",' >> $JsonOutput
	echo -e '"message":"'"$badrequest_message"'"}' >> $JsonOutput

	echo -e '<LTFSArchiver jobid="'$WORKING_UUID'" command="'$fileodir'" exitcode="400">' > $XmlOutput
	echo '<message>'"$badrequest_message"'</message></LTFSArchiver>' >> $XmlOutput

	echo -e "400\tbad_request\t$badrequest_message" > $TxtOutput
else
	#	forward a status 6
	update_uuid_status $WORKING_UUID 6
fi
[ -f  /tmp/$WORKING_UUID.checksumsupplied.txt ] && rm -f  /tmp/$WORKING_UUID.checksumsupplied.txt
