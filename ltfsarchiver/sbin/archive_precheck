#!/bin/bash
#  PrestoPRIME  LTFSArchiver
#  Version: 1.3
#  Authors: L. Savio, L. Boch, R. Borgotallo
#
#  Copyritght (C) 2011-2012 RAI â€“ Radiotelevisione Italiana <cr_segreteria@rai.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#       1.0.0 
#################################################
##########	MAIN
#################################################
#	incoming parms:
#		UUID
#	info needed
#		source path
#		if it is a file/dir
#		checksum list
#
CFG_FILE=`dirname $0`/../conf/ltfsarchiver.conf
. $CFG_FILE
. $LTFSARCHIVER_HOME/sbin/common.sh
WORKING_UUID=$1
nowtime=`date '+%Y-%m-%d %H:%M:%S'`
#	Task starting time
$CMD_DB "update requests set starttime='$nowtime' where id=$1;" >/dev/null 2>&1
MAIN_LOG_FILE=$LTFSARCHIVER_LOGDIR/`basename $0`.$WORKING_UUID.log
#	getting info
UUID_FILETYPE=`$CMD_DB "select datatype from requests where uuid='$WORKING_UUID';" | tr -d ' '`
UUID_CHECKSUMFILE=`$CMD_DB"select checksumfile from requests where uuid='$WORKING_UUID'" | sed -e 's/^[ \t]*//'`
UUID_DATA_SOURCE="`$CMD_DB"select sourcefile from requests where uuid='$WORKING_UUID'" | sed -e 's/^[ \t]*//'`"
#	Let's suppose that all will be allright	
GOODJOB=true
#	Create filelist according to checksum file supplied
#	Count files found on disk
case  $UUID_FILETYPE in
	"D"|"d")
		grep -v '^#' "$UUID_CHECKSUMFILE" | sed -re '/\*lto/s;\*lto.*:.*:.{36};\*'`dirname "${UUID_DATA_SOURCE}"`';' > /tmp/$WORKING_UUID.checksumsupplied.txt
		FOUNDFILENUMBER=`find "${UUID_DATA_SOURCE}" -type f | wc -l`
	;;
	"F"|"f")
		grep -v '^#' "$UUID_CHECKSUMFILE" | sed -e 's;\*.*;\*'"${UUID_DATA_SOURCE}"';' > /tmp/$WORKING_UUID.checksumsupplied.txt
		FOUNDFILENUMBER=1
	;;
esac
#	How many files (and checksum) have been supplied through checksum file?
SUPPLIEDFILENUMBER=`wc -l /tmp/$WORKING_UUID.checksumsupplied.txt | cut -d ' ' -f 1`
#	Now... Check if numbers match and
MISSINGFILE=0
#	Bad news... number son't match :-(
if [ $SUPPLIEDFILENUMBER -ne $FOUNDFILENUMBER ]; then
	#	Create report and send to falout
	main_logger 0 "Precheck control failed ($SUPPLIEDFILENUMBER supplied, $FOUNDFILENUMBER found)"
	fallout_uuid $WORKING_UUID 109
	create_fallout_report $WORKING_UUID "W"
	GOODJOB=false
else
	#	Check existnce of all listed files
	for ((LINENUM=1;$LINENUM<=$SUPPLIEDFILENUMBER;LINENUM++)); do
		temp=( `head -$LINENUM /tmp/$WORKING_UUID.checksumsupplied.txt | tail -1 | sed -e 's/^.*\*//'` )
		#       Nome file e checksum passati
		suppliedfile="${temp[@]}"
		main_logger 2 "File to check: $suppliedfile"
		if ! [ -f "$suppliedfile" ]; then
			main_logger 0 "$suppliedfile"' is missing'
			let MISSINGFILE+=1
		fi
	done
	main_logger 0 "---------------> MISSINGFILE="$MISSINGFILE
	#	Oops. some file seem to be missing: fallout
	if [ $MISSINGFILE -gt 0 ]; then
		main_logger 0 "Precheck control failed ($MISSINGFILE missing files)"
		fallout_uuid $WORKING_UUID 110
		create_fallout_report $WORKING_UUID "W"
		GOODJOB=false
	fi
fi
#	OK, checks passed, lets forward task
if $GOODJOB ; then
	update_uuid_status $WORKING_UUID 6
fi
#	remove temp files
[ -f  /tmp/$WORKING_UUID.checksumsupplied.txt ] && rm -f  /tmp/$WORKING_UUID.checksumsupplied.txt
