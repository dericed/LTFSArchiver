#!/bin/bash

#  PrestoPRIME  LTFSArchiver
#  Version: 1.0 Beta
#  Authors: L. Savio, L. Boch, R. Borgotallo
#
#  Copyritght (C) 2011-2012 RAI â€“ Radiotelevisione Italiana <cr_segreteria@rai.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. $CFGFILE
function get_parameter()
{
echo $PARM | tr '&' '\n' | grep "^$1" | sed 's/.*=//' | sed 's/\\//'
}

function output_html
{
echo 'Content-Type: text/html'
echo ''
echo '<HTML><BODY bgcolor="#FFFFCC" link="#000099" vlink="#000099">'
if [ ${#message[@]} == 1 ]; then
	echo 'No tape found'
else
	echo '<TABLE border=1>'
	echo '<TR>'
	echo '<TD>Poolname</TD>'
	echo '<TD>N. of tapes</TD>'
	echo '<TD>Total free MB</TD>'
	echo '<TD>Minimum free MB</TD>'
	echo '<TD>Maximum free MB</TD>'
	echo '</TR>'
	for ((DATA_IDX=0; DATA_IDX<${#message[@]}; DATA_IDX+=5)); do
		echo '<TR>'
		echo '<TD>'${message[$DATA_IDX]}'</TD>'
		echo '<TD>'${message[$DATA_IDX+1]}'</TD>'
		echo '<TD>'${message[$DATA_IDX+2]}'</TD>'
		echo '<TD>'${message[$DATA_IDX+3]}'</TD>'
		echo '<TD>'${message[$DATA_IDX+4]}'</TD>'
		echo '</TR>'
	done
	echo '</TABLE></BODY></HTML>'
fi
}

function output_text
{
echo 'Content-Type: text/plain'
echo ''
if [ ${#message[@]} == 1 ]; then
	testo="400\tNo tape found matching criteria"
else
	for ((DATA_IDX=0; DATA_IDX<${#message[@]}; DATA_IDX+=5)); do
	testo="200"
		testo=$testo"\t(${message[$DATA_IDX]},${message[$DATA_IDX+1]},${message[$DATA_IDX+2]},${message[$DATA_IDX+3]},${message[$DATA_IDX+4]})\t"
	done
fi
echo -e $testo
}


function output_json
{
echo 'content-type: application/json'
echo ''
if [ ${#message[@]} == 1 ]; then
	JsonOutput='{"exit_code":"400","message":"No tape found matching criteria"}'
else
	JsonOutput='{"exit_code":"200","output":['
	for ((DATA_IDX=0; DATA_IDX<${#message[@]}; DATA_IDX+=5)); do
	LAST_IDX=0
		let LAST_IDX+=5
		JsonOutput=$JsonOutput'{"Poolname":"'${message[$DATA_IDX]}'","NumTapes":"'${message[$DATA_IDX+1]}'","Total":"'${message[$DATA_IDX+2]}'","Min":"'${message[$DATA_IDX+3]}'","Max":"'${message[$DATA_IDX+4]}'"}'
		[ $LAST_IDX -lt ${#message[@]} ] && JsonOutput=$JsonOutput','
	done
	JsonOutput=$JsonOutput']}'
fi
echo $JsonOutput
}
################################################################################
# Script starts here
PARM=$QUERY_STRING
output=$( get_parameter Output )
poolname=$( get_parameter PoolName )
if [ -z $poolname ]; then
	QueryCommand=" select poolname, count(*) as tapes, sum(free)as total, min(free), max(free) from lto_info where free > 0 group by poolname order by poolname;"
else
	QueryCommand=" select poolname, count(*) as tapes, sum(free)as total, min(free), max(free) from lto_info where poolname='$poolname' and free > 0 group by poolname;"
fi
datitrovati=( `$CMD_DB "$QueryCommand" | tr -d ' ' | tr '|' ' ' | tr '\n' ' '` )
if [ -z $datitrovati ]; then
	message="none"
else
	message=( "${datitrovati[@]}" )
fi
case $output in
	"TEXT")
		output_text
	;;
	"JSON")
		output_json
	;;
	*)
		output_html
	;;
esac
