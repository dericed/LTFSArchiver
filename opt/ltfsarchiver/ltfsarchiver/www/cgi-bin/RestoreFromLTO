#!/bin/bash

#  PrestoPRIME  LTFSArchiver
#  Version: 1.0 Beta
#  Authors: L. Savio, L. Boch, R. Borgotallo
#
#  Copyritght (C) 2011-2012 RAI â€“ Radiotelevisione Italiana <cr_segreteria@rai.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. $CFGFILE
. `dirname $0`/common.sh

function insert_restore()
{
callingtime=`date '+%Y-%m-%d %H:%M:%S'`

$CMD_DB "INSERT INTO requests ( uuid,status,substatus,manager,operation,sourcefile,destfile,callingtime,ltotape ) \
	VALUES ( '$taskid','wait',0,'$LTFSARCHIVER_MODE','R','$filesrc','$filedest','$callingtime','`echo \"$filesrc\" | cut -d ":" -f 2`' )" > /dev/null 2>&1
RC=$?
}

# Script starts here
PARM=$QUERY_STRING
command=$( get_parameter Command )
guicall=$( get_parameter FromGUI )
case $command in
	#       GETRESULT/GETSTATUS
	"GetResult"|"GetStatus")
		#       devo leggere il taskid
		taskid=$( get_parameter TaskID )
		if [ -z $taskid ]; then
			#message="Empty TaskID supplied"
			message="400\tInvalid or empty ID"
		else
			#       ====================================
			#       Query DB, leggo info
			getinfo_common
		fi
	;;
	"RestoreFile")
		#	devo leggere il filename da restorare
		filesrc=$( get_parameter FileName )
		#	devo leggere il path su cui restorare
		filedest=$( get_parameter DestPath )
		#       devo fornire il taskid
		if ( [ -z "$filesrc" ] || [ -z "$filedest" ] ); then
			message="400\t"
			[ -z "$filesrc" ] && message=$message"Empty FileName supplied; "
			[ -z "$filedest" ] && message=$message"Empty DestPath supplied; "
		else
			#	c'e' un LTO con quella label?
			FOUND=`$CMD_DB "SELECT count(*) FROM lto_info WHERE label = '\`echo "$filesrc" | cut -d ":" -f 2\`';" | head -1`
			if [ $FOUND == 0 ]; then
				message="400\tInvalid Flocat"
			else
				#	la directory di arrivo deve esistere 
				basedest=`dirname "$filedest" | sed -e 's/.*\://'`
				if [ -d $basedest ]; then
					#	ma non deve esistere l'oggetto destinatario
					if ( [ -d "$filedest" ] || [ -e "$filedest" ] || [ -f "$filedest" ] ); then
						message="400\tDestination path \"$filedest\" exists"
					else
						taskid=`uuidgen`
						#	====================================
						#	Insert DB
						insert_restore
						if [ $RC == 0 ]; then
							#	restituisco dati
							#	====================================
							message="200\t$taskid"
						else
							message="500\tFailed"
						fi
					fi
				else
					message="400\tDestination upper level path \"$basedest\" doesn't exist"
				fi
			fi
		fi
		;;
		"Cancel")
			#       devo leggere il taskid
			taskid=$( get_parameter TaskID )
			if [ -z $taskid ]; then
				message="400\tInvalid or empty ID"
			else
				cancel_common "('R')"
			fi
		;;
		"Resubmit")
			#       devo leggere il taskid
			taskid=$( get_parameter TaskID )
			if [ -z $taskid ]; then
				message="400\tInvalid or empty ID"
			else
				requeue_common "('R')"

			fi
		;;

	*)
		message="400\tInvalid command"
	;;
esac
output_text_common
