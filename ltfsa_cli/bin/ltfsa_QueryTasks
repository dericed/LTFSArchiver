#!/bin/tcsh -f
#
#  ltfsa_cli
#  Version: 0.0.1
#  Authors: L. Boch
#
#  Copyright (C) 2013-2014 RAI - Radiotelevisione Italiana <cr_segreteria@rai.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU  General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set echo_style = both
set this = `basename $0`
if ( !($?pdir) ) then
	echo
	echo "$this Error "
	echo "\tVariable 'pdir' must be defined in environment"
	echo
	exit 99
endif
set tapeid = null
set ltfsaction = null
set taskstatus = null
set poolname = null
set filename = null
set filemode = exact
set date = null
set fromdate = null
set todate = null
set outfile = null
set output = `cat $pdir/config/output`
set curloptions = `cat $pdir/config/curloptions`
set ltfsaserverurl = `cat $pdir/config/ltfsaserverurl`
set service = `echo $this | sed -e s/ltfsa_//`
set help = 0
set i = 1
while ( $i <= $#argv )
	if ( "$argv[$i]" == "-t" || "$argv[$i]" == "--TapeID" ) then
		@ i++
		set tapeid = "$argv[$i]"
	else if ( "$argv[$i]" == "-s" || "$argv[$i]" == "--Status" ) then
		@ i++
		set taskstatus = "$argv[$i]"
	else if ( "$argv[$i]" == "-A" || "$argv[$i]" == "--LTFSAction" ) then
		@ i++
		set ltfsaction = "$argv[$i]"
	else if ( "$argv[$i]" == "-p" || "$argv[$i]" == "--PoolName" ) then
		@ i++
		set poolname = "$argv[$i]"
	else if ( "$argv[$i]" == "-N" || "$argv[$i]" == "--FileName" ) then
		@ i++
		set filename = "$argv[$i]"
	else if ( "$argv[$i]" == "--exact" ) then
		set filemode = exact
	else if ( "$argv[$i]" == "--like" ) then
		set filemode = like
	else if ( "$argv[$i]" == "--fromdate" ) then
		@ i++
		set fromdate = "$argv[$i]"
	else if ( "$argv[$i]" == "--todate" ) then
		@ i++
		set todate = "$argv[$i]"
	else if ( "$argv[$i]" == "--date" ) then
		@ i++
		set date = "$argv[$i]"
	else if ( "$argv[$i]" == "-f" || "$argv[$i]" == "--Output" ) then
		@ i++
		set output = "$argv[$i]"
	else if ( "$argv[$i]" == "-o" ) then
		@ i++
		set outfile = "$argv[$i]"
	else if ( "$argv[$i]" == "-h" || "$argv[$i]" == "--help" ) then
		set help = 1
	else
		set help = 1
	endif
	@ i++
end
#
#Sanity Check
#
if ( $help || "$output" != "XML" && "$output" != "JSON"  ) then
	echo
	echo "\tUsage:"
	echo "\t$this [-f|--Output XML|JSON] [-o <outfile>] [-t|--TapeID <TapeID>] [-p|--PoolName <PoolName>] [-s|--Status <status>]"
	echo "\t\t [-N|--FileName <FileName>] [--exact|--like] [-A|--LTFSAction <action>"
	echo "\t\t [--fromdate <date> --todate <date>| --date <date>]"
	echo "\t\t [-h|--help]"
	echo "\t\t where status = completed|running|waiting|fallout"
	echo "\t\t where action = AddTape|Checksum|ListTape|MakeAvailableMount|MakeAvailableUnmount|RestoreFromLTO|WriteToLTO"
	echo
	exit 400
endif
#
#Calling the service
#
set options = ""
if ( "$tapeid" != null ) then
	set options = "$options&TapeID=$tapeid" 
endif
if ( "$poolname" != null ) then
	set options = "$options&PoolName=$poolname" 
endif
if ( "$taskstatus" != null ) then
	set options = "$options&Status=$taskstatus" 
endif
if ( "$ltfsaction" != null ) then
	set options = "$options&LTFSAction=$ltfsaction" 
endif
if ( "$filename" != null ) then
	set options = "$options&FileName=$poolname&FileMode=$filemode" 
endif
if ( "$date" != null ) then
	set options = "$options&Date=$date" 
else
	if ( "$fromdate" != null ) then
		set options = "$options&FromDate=$fromdate" 
	endif
	if ( "$todate" != null ) then
		set options = "$options&ToDate=$todate" 
	endif
endif

curl $curloptions "$ltfsaserverurl/$service?Output=$output$options" -o $pdir/logs/$this.$$.out >& $pdir/logs/$this.$$.log
set ret = $?
if ( $ret ) then
	echo "$this got $ret"
	cat $pdir/logs/$this.$$.log
	exit 500
endif
rm $pdir/logs/$this.$$.log
if ( "$outfile" != null ) then
	mv $pdir/logs/$this.$$.out $outfile
else
	cat $pdir/logs/$this.$$.out
endif
exit 0
